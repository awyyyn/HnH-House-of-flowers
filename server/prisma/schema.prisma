generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  email       String     @unique
  firstName   String?
  lastName    String?
  middleName  String?
  password    String
  photo      String @default("https://clipart-library.com/newhp/94-948284_purple-flower-clip-art-6-petal-flower-clipart.png")
  phoneNumber String?
  birthDate   DateTime?
  verifiedAt DateTime?
  address address?
  role        UserRole
  status      UserStatus @default(UNVERIFIED)

  orders Order[]
  cart Cart?

  messagesSent     Message[] @relation(name: "SentMessages")
  messagesReceived Message[] @relation(name: "ReceivedMessages")

  // TimeStamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

type address {
  zone String?
  street String
  city String
  province String
}

enum UserStatus {
  VERIFIED
  UNVERIFIED
  DELETED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  customerID String      @db.ObjectId
  customer   User        @relation(fields: [customerID], references: [id])
  status     OrderStatus @default(PENDING)
  totalPrice Float

  orderItems OrderItem[]

  // TimeStamps
  orderDate    DateTime  @default(now())
  preOrderData DateTime?
  deliveryDate DateTime?

  @@map("orders")
}

model Customize {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float?

  orderItem OrderItem?

  // TimeStamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customizes")
}

model OrderItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  orderId  String @db.ObjectId
  order    Order  @relation(fields: [orderId], references: [id])
  price    Float
  quantity Int

  productId   String?    @unique @db.ObjectId
  product     Product?   @relation(fields: [productId], references: [id])
  isCustomize Boolean    @default(false)
  customizeId String?    @unique @db.ObjectId
  customize   Customize? @relation(fields: [customizeId], references: [id])

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  READY_FOR_PICKUP
}

model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String @default("")
  price       Float  @default(0.00)
  images       String[]
  // tags        String[]
  stock       Int    @default(1)


  status   ProductStatus   @default(IN_STOCK)
  category ProductCategory @default(FLOWER)

  orderItem OrderItem[]
  cartItem CartItem[]

  // TimeStamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

enum ProductStatus {
  PRE_ORDER
  DISCONTINUED
  IN_STOCK
  OUT_OF_STOCK
}

enum ProductCategory {
  FLOWER
  BOUQUET
  CHOCOLATE
  GIFT
}


model token {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  token String
  time DateTime

  @@map("tokens")
}

model BlockedUser {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId @unique 
  email       String @unique  
  reason String
  blockedAt DateTime @default(now())

  @@map("blocked_users")
}


model Cart {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // Unique cart ID
  userId     String   @db.ObjectId @unique
  user       User     @relation(fields: [userId], references: [id])
  items      CartItem[]   // List of items in the cart
  createdAt  DateTime @default(now()) // Timestamp of when the cart was created
  updatedAt  DateTime @updatedAt // Timestamp of when the cart was last updated

}

model CartItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // Unique item ID
  cartId     String  @db.ObjectId  // Cart ID (foreign key to Cart model)
  cart       Cart     @relation(fields: [cartId], references: [id])
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int      // Quantity of the product in the cart

  price      Float    // Price of the item

}

model Message {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  senderId     String   @db.ObjectId // The user who sent the message
  receiverId   String    @db.ObjectId// The user who received the message
  content      String?   // The message content (can be null for media messages)
  mediaUrl     String?   // URL for media (optional, for images, videos)
  // messageType  MessageType // Type of the message (text, image, video, etc.)
  // status       MessageStatus // Status of the message (sent, delivered, read)
  createdAt    DateTime @default(now()) // Timestamp of when the message was sent
  updatedAt    DateTime @updatedAt     // Timestamp of last update

  sender       User     @relation(name: "SentMessages", fields: [senderId], references: [id])
  receiver     User     @relation(name: "ReceivedMessages", fields: [receiverId], references: [id])
}
 
 